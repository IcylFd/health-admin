{"remainingRequest":"/Users/lifangdi/workspace/health-admin/node_modules/babel-loader/lib/index.js!/Users/lifangdi/workspace/health-admin/src/store/module/app.js","dependencies":[{"path":"/Users/lifangdi/workspace/health-admin/src/store/module/app.js","mtime":1548038358000},{"path":"/Users/lifangdi/workspace/health-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/health-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { getBreadCrumbList, setTagNavListInLocalstorage, getMenuByRouter, getTagNavListFromLocalstorage, getHomeRoute, getNextRoute, routeHasExist, routeEqual, getRouteTitleHandled, localSave, localRead } from '@/libs/util';\nimport { saveErrorLogger } from '@/api/data';\nimport router from '@/router';\nimport routers from '@/router/routers';\nimport config from '@/config';\nconst {\n  homeName\n} = config;\n\nconst closePage = (state, route) => {\n  const nextRoute = getNextRoute(state.tagNavList, route);\n  state.tagNavList = state.tagNavList.filter(item => {\n    return !routeEqual(item, route);\n  });\n  router.push(nextRoute);\n};\n\nexport default {\n  state: {\n    breadCrumbList: [],\n    tagNavList: [],\n    homeRoute: {},\n    local: localRead('local'),\n    errorList: [],\n    hasReadErrorPage: false\n  },\n  getters: {\n    menuList: (state, getters, rootState) => getMenuByRouter(routers, rootState.user.access),\n    errorCount: state => state.errorList.length\n  },\n  mutations: {\n    setBreadCrumb(state, route) {\n      state.breadCrumbList = getBreadCrumbList(route, state.homeRoute);\n    },\n\n    setHomeRoute(state, routes) {\n      state.homeRoute = getHomeRoute(routes, homeName);\n    },\n\n    setTagNavList(state, list) {\n      let tagList = [];\n\n      if (list) {\n        tagList = [...list];\n      } else tagList = getTagNavListFromLocalstorage() || [];\n\n      if (tagList[0] && tagList[0].name !== homeName) tagList.shift();\n      let homeTagIndex = tagList.findIndex(item => item.name === homeName);\n\n      if (homeTagIndex > 0) {\n        let homeTag = tagList.splice(homeTagIndex, 1)[0];\n        tagList.unshift(homeTag);\n      }\n\n      state.tagNavList = tagList;\n      setTagNavListInLocalstorage([...tagList]);\n    },\n\n    closeTag(state, route) {\n      let tag = state.tagNavList.filter(item => routeEqual(item, route));\n      route = tag[0] ? tag[0] : null;\n      if (!route) return;\n      closePage(state, route);\n    },\n\n    addTag(state, {\n      route,\n      type = 'unshift'\n    }) {\n      let router = getRouteTitleHandled(route);\n\n      if (!routeHasExist(state.tagNavList, router)) {\n        if (type === 'push') state.tagNavList.push(router);else {\n          if (router.name === homeName) state.tagNavList.unshift(router);else state.tagNavList.splice(1, 0, router);\n        }\n        setTagNavListInLocalstorage([...state.tagNavList]);\n      }\n    },\n\n    setLocal(state, lang) {\n      localSave('local', lang);\n      state.local = lang;\n    },\n\n    addError(state, error) {\n      state.errorList.push(error);\n    },\n\n    setHasReadErrorLoggerStatus(state, status = true) {\n      state.hasReadErrorPage = status;\n    }\n\n  },\n  actions: {\n    addErrorLog({\n      commit,\n      rootState\n    }, info) {\n      if (!window.location.href.includes('error_logger_page')) commit('setHasReadErrorLoggerStatus', false);\n      const {\n        user: {\n          token,\n          userId,\n          userName\n        }\n      } = rootState;\n      let data = { ...info,\n        time: Date.parse(new Date()),\n        token,\n        userId,\n        userName\n      };\n      saveErrorLogger(info).then(() => {\n        commit('addError', data);\n      });\n    }\n\n  }\n};",{"version":3,"sources":["/Users/lifangdi/workspace/health-admin/src/store/module/app.js"],"names":["getBreadCrumbList","setTagNavListInLocalstorage","getMenuByRouter","getTagNavListFromLocalstorage","getHomeRoute","getNextRoute","routeHasExist","routeEqual","getRouteTitleHandled","localSave","localRead","saveErrorLogger","router","routers","config","homeName","closePage","state","route","nextRoute","tagNavList","filter","item","push","breadCrumbList","homeRoute","local","errorList","hasReadErrorPage","getters","menuList","rootState","user","access","errorCount","length","mutations","setBreadCrumb","setHomeRoute","routes","setTagNavList","list","tagList","name","shift","homeTagIndex","findIndex","homeTag","splice","unshift","closeTag","tag","addTag","type","setLocal","lang","addError","error","setHasReadErrorLoggerStatus","status","actions","addErrorLog","commit","info","window","location","href","includes","token","userId","userName","data","time","Date","parse","then"],"mappings":"AAAA,SACEA,iBADF,EAEEC,2BAFF,EAGEC,eAHF,EAIEC,6BAJF,EAKEC,YALF,EAMEC,YANF,EAOEC,aAPF,EAQEC,UARF,EASEC,oBATF,EAUEC,SAVF,EAWEC,SAXF,QAYO,aAZP;AAaA,SAASC,eAAT,QAAgC,YAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeD,MAArB;;AAEA,MAAME,SAAS,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClC,QAAMC,SAAS,GAAGd,YAAY,CAACY,KAAK,CAACG,UAAP,EAAmBF,KAAnB,CAA9B;AACAD,EAAAA,KAAK,CAACG,UAAN,GAAmBH,KAAK,CAACG,UAAN,CAAiBC,MAAjB,CAAwBC,IAAI,IAAI;AACjD,WAAO,CAACf,UAAU,CAACe,IAAD,EAAOJ,KAAP,CAAlB;AACD,GAFkB,CAAnB;AAGAN,EAAAA,MAAM,CAACW,IAAP,CAAYJ,SAAZ;AACD,CAND;;AAQA,eAAe;AACbF,EAAAA,KAAK,EAAE;AACLO,IAAAA,cAAc,EAAE,EADX;AAELJ,IAAAA,UAAU,EAAE,EAFP;AAGLK,IAAAA,SAAS,EAAE,EAHN;AAILC,IAAAA,KAAK,EAAEhB,SAAS,CAAC,OAAD,CAJX;AAKLiB,IAAAA,SAAS,EAAE,EALN;AAMLC,IAAAA,gBAAgB,EAAE;AANb,GADM;AASbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE,CAACb,KAAD,EAAQY,OAAR,EAAiBE,SAAjB,KAA+B7B,eAAe,CAACW,OAAD,EAAUkB,SAAS,CAACC,IAAV,CAAeC,MAAzB,CADjD;AAEPC,IAAAA,UAAU,EAAEjB,KAAK,IAAIA,KAAK,CAACU,SAAN,CAAgBQ;AAF9B,GATI;AAabC,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,CAAEpB,KAAF,EAASC,KAAT,EAAgB;AAC3BD,MAAAA,KAAK,CAACO,cAAN,GAAuBxB,iBAAiB,CAACkB,KAAD,EAAQD,KAAK,CAACQ,SAAd,CAAxC;AACD,KAHQ;;AAITa,IAAAA,YAAY,CAAErB,KAAF,EAASsB,MAAT,EAAiB;AAC3BtB,MAAAA,KAAK,CAACQ,SAAN,GAAkBrB,YAAY,CAACmC,MAAD,EAASxB,QAAT,CAA9B;AACD,KANQ;;AAOTyB,IAAAA,aAAa,CAAEvB,KAAF,EAASwB,IAAT,EAAe;AAC1B,UAAIC,OAAO,GAAG,EAAd;;AACA,UAAID,IAAJ,EAAU;AACRC,QAAAA,OAAO,GAAG,CAAC,GAAGD,IAAJ,CAAV;AACD,OAFD,MAEOC,OAAO,GAAGvC,6BAA6B,MAAM,EAA7C;;AACP,UAAIuC,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,KAAoB5B,QAAtC,EAAgD2B,OAAO,CAACE,KAAR;AAChD,UAAIC,YAAY,GAAGH,OAAO,CAACI,SAAR,CAAkBxB,IAAI,IAAIA,IAAI,CAACqB,IAAL,KAAc5B,QAAxC,CAAnB;;AACA,UAAI8B,YAAY,GAAG,CAAnB,EAAsB;AACpB,YAAIE,OAAO,GAAGL,OAAO,CAACM,MAAR,CAAeH,YAAf,EAA6B,CAA7B,EAAgC,CAAhC,CAAd;AACAH,QAAAA,OAAO,CAACO,OAAR,CAAgBF,OAAhB;AACD;;AACD9B,MAAAA,KAAK,CAACG,UAAN,GAAmBsB,OAAnB;AACAzC,MAAAA,2BAA2B,CAAC,CAAC,GAAGyC,OAAJ,CAAD,CAA3B;AACD,KApBQ;;AAqBTQ,IAAAA,QAAQ,CAAEjC,KAAF,EAASC,KAAT,EAAgB;AACtB,UAAIiC,GAAG,GAAGlC,KAAK,CAACG,UAAN,CAAiBC,MAAjB,CAAwBC,IAAI,IAAIf,UAAU,CAACe,IAAD,EAAOJ,KAAP,CAA1C,CAAV;AACAA,MAAAA,KAAK,GAAGiC,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAZ,GAAkB,IAA1B;AACA,UAAI,CAACjC,KAAL,EAAY;AACZF,MAAAA,SAAS,CAACC,KAAD,EAAQC,KAAR,CAAT;AACD,KA1BQ;;AA2BTkC,IAAAA,MAAM,CAAEnC,KAAF,EAAS;AAAEC,MAAAA,KAAF;AAASmC,MAAAA,IAAI,GAAG;AAAhB,KAAT,EAAsC;AAC1C,UAAIzC,MAAM,GAAGJ,oBAAoB,CAACU,KAAD,CAAjC;;AACA,UAAI,CAACZ,aAAa,CAACW,KAAK,CAACG,UAAP,EAAmBR,MAAnB,CAAlB,EAA8C;AAC5C,YAAIyC,IAAI,KAAK,MAAb,EAAqBpC,KAAK,CAACG,UAAN,CAAiBG,IAAjB,CAAsBX,MAAtB,EAArB,KACK;AACH,cAAIA,MAAM,CAAC+B,IAAP,KAAgB5B,QAApB,EAA8BE,KAAK,CAACG,UAAN,CAAiB6B,OAAjB,CAAyBrC,MAAzB,EAA9B,KACKK,KAAK,CAACG,UAAN,CAAiB4B,MAAjB,CAAwB,CAAxB,EAA2B,CAA3B,EAA8BpC,MAA9B;AACN;AACDX,QAAAA,2BAA2B,CAAC,CAAC,GAAGgB,KAAK,CAACG,UAAV,CAAD,CAA3B;AACD;AACF,KArCQ;;AAsCTkC,IAAAA,QAAQ,CAAErC,KAAF,EAASsC,IAAT,EAAe;AACrB9C,MAAAA,SAAS,CAAC,OAAD,EAAU8C,IAAV,CAAT;AACAtC,MAAAA,KAAK,CAACS,KAAN,GAAc6B,IAAd;AACD,KAzCQ;;AA0CTC,IAAAA,QAAQ,CAAEvC,KAAF,EAASwC,KAAT,EAAgB;AACtBxC,MAAAA,KAAK,CAACU,SAAN,CAAgBJ,IAAhB,CAAqBkC,KAArB;AACD,KA5CQ;;AA6CTC,IAAAA,2BAA2B,CAAEzC,KAAF,EAAS0C,MAAM,GAAG,IAAlB,EAAwB;AACjD1C,MAAAA,KAAK,CAACW,gBAAN,GAAyB+B,MAAzB;AACD;;AA/CQ,GAbE;AA8DbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,WAAW,CAAE;AAAEC,MAAAA,MAAF;AAAU/B,MAAAA;AAAV,KAAF,EAAyBgC,IAAzB,EAA+B;AACxC,UAAI,CAACC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,QAArB,CAA8B,mBAA9B,CAAL,EAAyDL,MAAM,CAAC,6BAAD,EAAgC,KAAhC,CAAN;AACzD,YAAM;AAAE9B,QAAAA,IAAI,EAAE;AAAEoC,UAAAA,KAAF;AAASC,UAAAA,MAAT;AAAiBC,UAAAA;AAAjB;AAAR,UAAwCvC,SAA9C;AACA,UAAIwC,IAAI,GAAG,EACT,GAAGR,IADM;AAETS,QAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAW,IAAID,IAAJ,EAAX,CAFG;AAGTL,QAAAA,KAHS;AAITC,QAAAA,MAJS;AAKTC,QAAAA;AALS,OAAX;AAOA3D,MAAAA,eAAe,CAACoD,IAAD,CAAf,CAAsBY,IAAtB,CAA2B,MAAM;AAC/Bb,QAAAA,MAAM,CAAC,UAAD,EAAaS,IAAb,CAAN;AACD,OAFD;AAGD;;AAdM;AA9DI,CAAf","sourcesContent":["import {\n  getBreadCrumbList,\n  setTagNavListInLocalstorage,\n  getMenuByRouter,\n  getTagNavListFromLocalstorage,\n  getHomeRoute,\n  getNextRoute,\n  routeHasExist,\n  routeEqual,\n  getRouteTitleHandled,\n  localSave,\n  localRead\n} from '@/libs/util'\nimport { saveErrorLogger } from '@/api/data'\nimport router from '@/router'\nimport routers from '@/router/routers'\nimport config from '@/config'\nconst { homeName } = config\n\nconst closePage = (state, route) => {\n  const nextRoute = getNextRoute(state.tagNavList, route)\n  state.tagNavList = state.tagNavList.filter(item => {\n    return !routeEqual(item, route)\n  })\n  router.push(nextRoute)\n}\n\nexport default {\n  state: {\n    breadCrumbList: [],\n    tagNavList: [],\n    homeRoute: {},\n    local: localRead('local'),\n    errorList: [],\n    hasReadErrorPage: false\n  },\n  getters: {\n    menuList: (state, getters, rootState) => getMenuByRouter(routers, rootState.user.access),\n    errorCount: state => state.errorList.length\n  },\n  mutations: {\n    setBreadCrumb (state, route) {\n      state.breadCrumbList = getBreadCrumbList(route, state.homeRoute)\n    },\n    setHomeRoute (state, routes) {\n      state.homeRoute = getHomeRoute(routes, homeName)\n    },\n    setTagNavList (state, list) {\n      let tagList = []\n      if (list) {\n        tagList = [...list]\n      } else tagList = getTagNavListFromLocalstorage() || []\n      if (tagList[0] && tagList[0].name !== homeName) tagList.shift()\n      let homeTagIndex = tagList.findIndex(item => item.name === homeName)\n      if (homeTagIndex > 0) {\n        let homeTag = tagList.splice(homeTagIndex, 1)[0]\n        tagList.unshift(homeTag)\n      }\n      state.tagNavList = tagList\n      setTagNavListInLocalstorage([...tagList])\n    },\n    closeTag (state, route) {\n      let tag = state.tagNavList.filter(item => routeEqual(item, route))\n      route = tag[0] ? tag[0] : null\n      if (!route) return\n      closePage(state, route)\n    },\n    addTag (state, { route, type = 'unshift' }) {\n      let router = getRouteTitleHandled(route)\n      if (!routeHasExist(state.tagNavList, router)) {\n        if (type === 'push') state.tagNavList.push(router)\n        else {\n          if (router.name === homeName) state.tagNavList.unshift(router)\n          else state.tagNavList.splice(1, 0, router)\n        }\n        setTagNavListInLocalstorage([...state.tagNavList])\n      }\n    },\n    setLocal (state, lang) {\n      localSave('local', lang)\n      state.local = lang\n    },\n    addError (state, error) {\n      state.errorList.push(error)\n    },\n    setHasReadErrorLoggerStatus (state, status = true) {\n      state.hasReadErrorPage = status\n    }\n  },\n  actions: {\n    addErrorLog ({ commit, rootState }, info) {\n      if (!window.location.href.includes('error_logger_page')) commit('setHasReadErrorLoggerStatus', false)\n      const { user: { token, userId, userName } } = rootState\n      let data = {\n        ...info,\n        time: Date.parse(new Date()),\n        token,\n        userId,\n        userName\n      }\n      saveErrorLogger(info).then(() => {\n        commit('addError', data)\n      })\n    }\n  }\n}\n"]}]}