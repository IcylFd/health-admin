{"remainingRequest":"/Users/lifangdi/workspace/health-admin/node_modules/babel-loader/lib/index.js!/Users/lifangdi/workspace/health-admin/src/libs/axios.js","dependencies":[{"path":"/Users/lifangdi/workspace/health-admin/src/libs/axios.js","mtime":1548038358000},{"path":"/Users/lifangdi/workspace/health-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/health-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport store from '@/store'; // import { Spin } from 'iview'\n\nconst addErrorLog = errorInfo => {\n  const {\n    statusText,\n    status,\n    request: {\n      responseURL\n    }\n  } = errorInfo;\n  let info = {\n    type: 'ajax',\n    code: status,\n    mes: statusText,\n    url: responseURL\n  };\n  if (!responseURL.includes('save_error_logger')) store.dispatch('addErrorLog', info);\n};\n\nclass HttpRequest {\n  constructor(baseUrl = baseURL) {\n    this.baseUrl = baseUrl;\n    this.queue = {};\n  }\n\n  getInsideConfig() {\n    const config = {\n      baseURL: this.baseUrl,\n      headers: {//\n      }\n    };\n    return config;\n  }\n\n  destroy(url) {\n    delete this.queue[url];\n\n    if (!Object.keys(this.queue).length) {// Spin.hide()\n    }\n  }\n\n  interceptors(instance, url) {\n    // 请求拦截\n    instance.interceptors.request.use(config => {\n      // 添加全局的loading...\n      if (!Object.keys(this.queue).length) {// Spin.show() // 不建议开启，因为界面不友好\n      }\n\n      this.queue[url] = true;\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    }); // 响应拦截\n\n    instance.interceptors.response.use(res => {\n      this.destroy(url);\n      const {\n        data,\n        status\n      } = res;\n      return {\n        data,\n        status\n      };\n    }, error => {\n      this.destroy(url);\n      let errorInfo = error.response;\n\n      if (!errorInfo) {\n        const {\n          request: {\n            statusText,\n            status\n          },\n          config\n        } = JSON.parse(JSON.stringify(error));\n        errorInfo = {\n          statusText,\n          status,\n          request: {\n            responseURL: config.url\n          }\n        };\n      }\n\n      addErrorLog(errorInfo);\n      return Promise.reject(error);\n    });\n  }\n\n  request(options) {\n    const instance = axios.create();\n    options = Object.assign(this.getInsideConfig(), options);\n    this.interceptors(instance, options.url);\n    return instance(options);\n  }\n\n}\n\nexport default HttpRequest;",{"version":3,"sources":["/Users/lifangdi/workspace/health-admin/src/libs/axios.js"],"names":["axios","store","addErrorLog","errorInfo","statusText","status","request","responseURL","info","type","code","mes","url","includes","dispatch","HttpRequest","constructor","baseUrl","baseURL","queue","getInsideConfig","config","headers","destroy","Object","keys","length","interceptors","instance","use","error","Promise","reject","response","res","data","JSON","parse","stringify","options","create","assign"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,MAAMC,WAAW,GAAGC,SAAS,IAAI;AAC/B,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AAA/B,MAAmDJ,SAAzD;AACA,MAAIK,IAAI,GAAG;AACTC,IAAAA,IAAI,EAAE,MADG;AAETC,IAAAA,IAAI,EAAEL,MAFG;AAGTM,IAAAA,GAAG,EAAEP,UAHI;AAITQ,IAAAA,GAAG,EAAEL;AAJI,GAAX;AAMA,MAAI,CAACA,WAAW,CAACM,QAAZ,CAAqB,mBAArB,CAAL,EAAgDZ,KAAK,CAACa,QAAN,CAAe,aAAf,EAA8BN,IAA9B;AACjD,CATD;;AAWA,MAAMO,WAAN,CAAkB;AAChBC,EAAAA,WAAW,CAAEC,OAAO,GAAGC,OAAZ,EAAqB;AAC9B,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKE,KAAL,GAAa,EAAb;AACD;;AACDC,EAAAA,eAAe,GAAI;AACjB,UAAMC,MAAM,GAAG;AACbH,MAAAA,OAAO,EAAE,KAAKD,OADD;AAEbK,MAAAA,OAAO,EAAE,CACP;AADO;AAFI,KAAf;AAMA,WAAOD,MAAP;AACD;;AACDE,EAAAA,OAAO,CAAEX,GAAF,EAAO;AACZ,WAAO,KAAKO,KAAL,CAAWP,GAAX,CAAP;;AACA,QAAI,CAACY,MAAM,CAACC,IAAP,CAAY,KAAKN,KAAjB,EAAwBO,MAA7B,EAAqC,CACnC;AACD;AACF;;AACDC,EAAAA,YAAY,CAAEC,QAAF,EAAYhB,GAAZ,EAAiB;AAC3B;AACAgB,IAAAA,QAAQ,CAACD,YAAT,CAAsBrB,OAAtB,CAA8BuB,GAA9B,CAAkCR,MAAM,IAAI;AAC1C;AACA,UAAI,CAACG,MAAM,CAACC,IAAP,CAAY,KAAKN,KAAjB,EAAwBO,MAA7B,EAAqC,CACnC;AACD;;AACD,WAAKP,KAAL,CAAWP,GAAX,IAAkB,IAAlB;AACA,aAAOS,MAAP;AACD,KAPD,EAOGS,KAAK,IAAI;AACV,aAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,KATD,EAF2B,CAY3B;;AACAF,IAAAA,QAAQ,CAACD,YAAT,CAAsBM,QAAtB,CAA+BJ,GAA/B,CAAmCK,GAAG,IAAI;AACxC,WAAKX,OAAL,CAAaX,GAAb;AACA,YAAM;AAAEuB,QAAAA,IAAF;AAAQ9B,QAAAA;AAAR,UAAmB6B,GAAzB;AACA,aAAO;AAAEC,QAAAA,IAAF;AAAQ9B,QAAAA;AAAR,OAAP;AACD,KAJD,EAIGyB,KAAK,IAAI;AACV,WAAKP,OAAL,CAAaX,GAAb;AACA,UAAIT,SAAS,GAAG2B,KAAK,CAACG,QAAtB;;AACA,UAAI,CAAC9B,SAAL,EAAgB;AACd,cAAM;AAAEG,UAAAA,OAAO,EAAE;AAAEF,YAAAA,UAAF;AAAcC,YAAAA;AAAd,WAAX;AAAmCgB,UAAAA;AAAnC,YAA8Ce,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeR,KAAf,CAAX,CAApD;AACA3B,QAAAA,SAAS,GAAG;AACVC,UAAAA,UADU;AAEVC,UAAAA,MAFU;AAGVC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,WAAW,EAAEc,MAAM,CAACT;AAAtB;AAHC,SAAZ;AAKD;;AACDV,MAAAA,WAAW,CAACC,SAAD,CAAX;AACA,aAAO4B,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,KAjBD;AAkBD;;AACDxB,EAAAA,OAAO,CAAEiC,OAAF,EAAW;AAChB,UAAMX,QAAQ,GAAG5B,KAAK,CAACwC,MAAN,EAAjB;AACAD,IAAAA,OAAO,GAAGf,MAAM,CAACiB,MAAP,CAAc,KAAKrB,eAAL,EAAd,EAAsCmB,OAAtC,CAAV;AACA,SAAKZ,YAAL,CAAkBC,QAAlB,EAA4BW,OAAO,CAAC3B,GAApC;AACA,WAAOgB,QAAQ,CAACW,OAAD,CAAf;AACD;;AAzDe;;AA2DlB,eAAexB,WAAf","sourcesContent":["import axios from 'axios'\nimport store from '@/store'\n// import { Spin } from 'iview'\nconst addErrorLog = errorInfo => {\n  const { statusText, status, request: { responseURL } } = errorInfo\n  let info = {\n    type: 'ajax',\n    code: status,\n    mes: statusText,\n    url: responseURL\n  }\n  if (!responseURL.includes('save_error_logger')) store.dispatch('addErrorLog', info)\n}\n\nclass HttpRequest {\n  constructor (baseUrl = baseURL) {\n    this.baseUrl = baseUrl\n    this.queue = {}\n  }\n  getInsideConfig () {\n    const config = {\n      baseURL: this.baseUrl,\n      headers: {\n        //\n      }\n    }\n    return config\n  }\n  destroy (url) {\n    delete this.queue[url]\n    if (!Object.keys(this.queue).length) {\n      // Spin.hide()\n    }\n  }\n  interceptors (instance, url) {\n    // 请求拦截\n    instance.interceptors.request.use(config => {\n      // 添加全局的loading...\n      if (!Object.keys(this.queue).length) {\n        // Spin.show() // 不建议开启，因为界面不友好\n      }\n      this.queue[url] = true\n      return config\n    }, error => {\n      return Promise.reject(error)\n    })\n    // 响应拦截\n    instance.interceptors.response.use(res => {\n      this.destroy(url)\n      const { data, status } = res\n      return { data, status }\n    }, error => {\n      this.destroy(url)\n      let errorInfo = error.response\n      if (!errorInfo) {\n        const { request: { statusText, status }, config } = JSON.parse(JSON.stringify(error))\n        errorInfo = {\n          statusText,\n          status,\n          request: { responseURL: config.url }\n        }\n      }\n      addErrorLog(errorInfo)\n      return Promise.reject(error)\n    })\n  }\n  request (options) {\n    const instance = axios.create()\n    options = Object.assign(this.getInsideConfig(), options)\n    this.interceptors(instance, options.url)\n    return instance(options)\n  }\n}\nexport default HttpRequest\n"]}]}