{"remainingRequest":"/Users/lifangdi/workspace/health-admin/node_modules/babel-loader/lib/index.js!/Users/lifangdi/workspace/health-admin/src/mock/user.js","dependencies":[{"path":"/Users/lifangdi/workspace/health-admin/src/mock/user.js","mtime":1548038358000},{"path":"/Users/lifangdi/workspace/health-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/health-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Mock from 'mockjs';\nimport { doCustomTimes } from '@/libs/util';\nconst Random = Mock.Random;\nexport const getMessageInit = () => {\n  let unreadList = [];\n  doCustomTimes(3, () => {\n    unreadList.push(Mock.mock({\n      title: Random.cword(10, 15),\n      create_time: '@date',\n      msg_id: Random.increment(100)\n    }));\n  });\n  let readedList = [];\n  doCustomTimes(4, () => {\n    readedList.push(Mock.mock({\n      title: Random.cword(10, 15),\n      create_time: '@date',\n      msg_id: Random.increment(100)\n    }));\n  });\n  let trashList = [];\n  doCustomTimes(2, () => {\n    trashList.push(Mock.mock({\n      title: Random.cword(10, 15),\n      create_time: '@date',\n      msg_id: Random.increment(100)\n    }));\n  });\n  return {\n    unread: unreadList,\n    readed: readedList,\n    trash: trashList\n  };\n};\nexport const getContentByMsgId = () => {\n  return `<divcourier new',=\"\" monospace;font-weight:=\"\" normal;font-size:=\"\" 12px;line-height:=\"\" 18px;white-space:=\"\" pre;\"=\"\"><div>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-size: medium;\">这是消息内容，这个内容是使用<span style=\"color: rgb(255, 255, 255); background-color: rgb(28, 72, 127);\">富文本编辑器</span>编辑的，所以你可以看到一些<span style=\"text-decoration-line: underline; font-style: italic; color: rgb(194, 79, 74);\">格式</span></span></div><ol><li>你可以查看Mock返回的数据格式，和api请求的接口，来确定你的后端接口的开发</li><li>使用你的真实接口后，前端页面基本不需要修改即可满足基本需求</li><li>快来试试吧</li></ol><p>${Random.csentence(100, 200)}</p></divcourier>`;\n};\nexport const hasRead = () => {\n  return true;\n};\nexport const removeReaded = () => {\n  return true;\n};\nexport const restoreTrash = () => {\n  return true;\n};\nexport const messageCount = () => {\n  return 3;\n};",{"version":3,"sources":["/Users/lifangdi/workspace/health-admin/src/mock/user.js"],"names":["Mock","doCustomTimes","Random","getMessageInit","unreadList","push","mock","title","cword","create_time","msg_id","increment","readedList","trashList","unread","readed","trash","getContentByMsgId","csentence","hasRead","removeReaded","restoreTrash","messageCount"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,MAAMC,MAAM,GAAGF,IAAI,CAACE,MAApB;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,MAAIC,UAAU,GAAG,EAAjB;AACAH,EAAAA,aAAa,CAAC,CAAD,EAAI,MAAM;AACrBG,IAAAA,UAAU,CAACC,IAAX,CAAgBL,IAAI,CAACM,IAAL,CAAU;AACxBC,MAAAA,KAAK,EAAEL,MAAM,CAACM,KAAP,CAAa,EAAb,EAAiB,EAAjB,CADiB;AAExBC,MAAAA,WAAW,EAAE,OAFW;AAGxBC,MAAAA,MAAM,EAAER,MAAM,CAACS,SAAP,CAAiB,GAAjB;AAHgB,KAAV,CAAhB;AAKD,GANY,CAAb;AAOA,MAAIC,UAAU,GAAG,EAAjB;AACAX,EAAAA,aAAa,CAAC,CAAD,EAAI,MAAM;AACrBW,IAAAA,UAAU,CAACP,IAAX,CAAgBL,IAAI,CAACM,IAAL,CAAU;AACxBC,MAAAA,KAAK,EAAEL,MAAM,CAACM,KAAP,CAAa,EAAb,EAAiB,EAAjB,CADiB;AAExBC,MAAAA,WAAW,EAAE,OAFW;AAGxBC,MAAAA,MAAM,EAAER,MAAM,CAACS,SAAP,CAAiB,GAAjB;AAHgB,KAAV,CAAhB;AAKD,GANY,CAAb;AAOA,MAAIE,SAAS,GAAG,EAAhB;AACAZ,EAAAA,aAAa,CAAC,CAAD,EAAI,MAAM;AACrBY,IAAAA,SAAS,CAACR,IAAV,CAAeL,IAAI,CAACM,IAAL,CAAU;AACvBC,MAAAA,KAAK,EAAEL,MAAM,CAACM,KAAP,CAAa,EAAb,EAAiB,EAAjB,CADgB;AAEvBC,MAAAA,WAAW,EAAE,OAFU;AAGvBC,MAAAA,MAAM,EAAER,MAAM,CAACS,SAAP,CAAiB,GAAjB;AAHe,KAAV,CAAf;AAKD,GANY,CAAb;AAOA,SAAO;AACLG,IAAAA,MAAM,EAAEV,UADH;AAELW,IAAAA,MAAM,EAAEH,UAFH;AAGLI,IAAAA,KAAK,EAAEH;AAHF,GAAP;AAKD,CA9BM;AAgCP,OAAO,MAAMI,iBAAiB,GAAG,MAAM;AACrC,SAAQ,kiBAAiiBf,MAAM,CAACgB,SAAP,CAAiB,GAAjB,EAAsB,GAAtB,CAA2B,mBAApkB;AACD,CAFM;AAIP,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,SAAO,IAAP;AACD,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAChC,SAAO,IAAP;AACD,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAChC,SAAO,IAAP;AACD,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAChC,SAAO,CAAP;AACD,CAFM","sourcesContent":["import Mock from 'mockjs'\nimport { doCustomTimes } from '@/libs/util'\nconst Random = Mock.Random\n\nexport const getMessageInit = () => {\n  let unreadList = []\n  doCustomTimes(3, () => {\n    unreadList.push(Mock.mock({\n      title: Random.cword(10, 15),\n      create_time: '@date',\n      msg_id: Random.increment(100)\n    }))\n  })\n  let readedList = []\n  doCustomTimes(4, () => {\n    readedList.push(Mock.mock({\n      title: Random.cword(10, 15),\n      create_time: '@date',\n      msg_id: Random.increment(100)\n    }))\n  })\n  let trashList = []\n  doCustomTimes(2, () => {\n    trashList.push(Mock.mock({\n      title: Random.cword(10, 15),\n      create_time: '@date',\n      msg_id: Random.increment(100)\n    }))\n  })\n  return {\n    unread: unreadList,\n    readed: readedList,\n    trash: trashList\n  }\n}\n\nexport const getContentByMsgId = () => {\n  return `<divcourier new',=\"\" monospace;font-weight:=\"\" normal;font-size:=\"\" 12px;line-height:=\"\" 18px;white-space:=\"\" pre;\"=\"\"><div>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-size: medium;\">这是消息内容，这个内容是使用<span style=\"color: rgb(255, 255, 255); background-color: rgb(28, 72, 127);\">富文本编辑器</span>编辑的，所以你可以看到一些<span style=\"text-decoration-line: underline; font-style: italic; color: rgb(194, 79, 74);\">格式</span></span></div><ol><li>你可以查看Mock返回的数据格式，和api请求的接口，来确定你的后端接口的开发</li><li>使用你的真实接口后，前端页面基本不需要修改即可满足基本需求</li><li>快来试试吧</li></ol><p>${Random.csentence(100, 200)}</p></divcourier>`\n}\n\nexport const hasRead = () => {\n  return true\n}\n\nexport const removeReaded = () => {\n  return true\n}\n\nexport const restoreTrash = () => {\n  return true\n}\n\nexport const messageCount = () => {\n  return 3\n}\n"]}]}