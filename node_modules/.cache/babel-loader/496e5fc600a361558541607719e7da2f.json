{"remainingRequest":"/Users/lifangdi/workspace/health-admin/node_modules/babel-loader/lib/index.js!/Users/lifangdi/workspace/health-admin/src/store/module/user.js","dependencies":[{"path":"/Users/lifangdi/workspace/health-admin/src/store/module/user.js","mtime":1548038358000},{"path":"/Users/lifangdi/workspace/health-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/health-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { login, logout, getUserInfo, getMessage, getContentByMsgId, hasRead, removeReaded, restoreTrash, getUnreadCount } from '@/api/user';\nimport { setToken, getToken } from '@/libs/util';\nexport default {\n  state: {\n    userName: '',\n    userId: '',\n    avatorImgPath: '',\n    token: getToken(),\n    access: '',\n    hasGetInfo: false,\n    unreadCount: 0,\n    messageUnreadList: [],\n    messageReadedList: [],\n    messageTrashList: [],\n    messageContentStore: {}\n  },\n  mutations: {\n    setAvator(state, avatorPath) {\n      state.avatorImgPath = avatorPath;\n    },\n\n    setUserId(state, id) {\n      state.userId = id;\n    },\n\n    setUserName(state, name) {\n      state.userName = name;\n    },\n\n    setAccess(state, access) {\n      state.access = access;\n    },\n\n    setToken(state, token) {\n      state.token = token;\n      setToken(token);\n    },\n\n    setHasGetInfo(state, status) {\n      state.hasGetInfo = status;\n    },\n\n    setMessageCount(state, count) {\n      state.unreadCount = count;\n    },\n\n    setMessageUnreadList(state, list) {\n      state.messageUnreadList = list;\n    },\n\n    setMessageReadedList(state, list) {\n      state.messageReadedList = list;\n    },\n\n    setMessageTrashList(state, list) {\n      state.messageTrashList = list;\n    },\n\n    updateMessageContentStore(state, {\n      msg_id,\n      content\n    }) {\n      state.messageContentStore[msg_id] = content;\n    },\n\n    moveMsg(state, {\n      from,\n      to,\n      msg_id\n    }) {\n      const index = state[from].findIndex(_ => _.msg_id === msg_id);\n      const msgItem = state[from].splice(index, 1)[0];\n      msgItem.loading = false;\n      state[to].unshift(msgItem);\n    }\n\n  },\n  getters: {\n    messageUnreadCount: state => state.messageUnreadList.length,\n    messageReadedCount: state => state.messageReadedList.length,\n    messageTrashCount: state => state.messageTrashList.length\n  },\n  actions: {\n    // 登录\n    handleLogin({\n      commit\n    }, {\n      userName,\n      password\n    }) {\n      userName = userName.trim();\n      return new Promise((resolve, reject) => {\n        login({\n          userName,\n          password\n        }).then(res => {\n          const data = res.data;\n          commit('setToken', data.token);\n          resolve();\n        }).catch(err => {\n          reject(err);\n        });\n      });\n    },\n\n    // 退出登录\n    handleLogOut({\n      state,\n      commit\n    }) {\n      return new Promise((resolve, reject) => {\n        logout(state.token).then(() => {\n          commit('setToken', '');\n          commit('setAccess', []);\n          resolve();\n        }).catch(err => {\n          reject(err);\n        }); // 如果你的退出登录无需请求接口，则可以直接使用下面三行代码而无需使用logout调用接口\n        // commit('setToken', '')\n        // commit('setAccess', [])\n        // resolve()\n      });\n    },\n\n    // 获取用户相关信息\n    getUserInfo({\n      state,\n      commit\n    }) {\n      return new Promise((resolve, reject) => {\n        try {\n          getUserInfo(state.token).then(res => {\n            const data = res.data;\n            commit('setAvator', data.avator);\n            commit('setUserName', data.name);\n            commit('setUserId', data.user_id);\n            commit('setAccess', data.access);\n            commit('setHasGetInfo', true);\n            resolve(data);\n          }).catch(err => {\n            reject(err);\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    },\n\n    // 此方法用来获取未读消息条数，接口只返回数值，不返回消息列表\n    getUnreadMessageCount({\n      state,\n      commit\n    }) {\n      getUnreadCount().then(res => {\n        const {\n          data\n        } = res;\n        commit('setMessageCount', data);\n      });\n    },\n\n    // 获取消息列表，其中包含未读、已读、回收站三个列表\n    getMessageList({\n      state,\n      commit\n    }) {\n      return new Promise((resolve, reject) => {\n        getMessage().then(res => {\n          const {\n            unread,\n            readed,\n            trash\n          } = res.data;\n          commit('setMessageUnreadList', unread.sort((a, b) => new Date(b.create_time) - new Date(a.create_time)));\n          commit('setMessageReadedList', readed.map(_ => {\n            _.loading = false;\n            return _;\n          }).sort((a, b) => new Date(b.create_time) - new Date(a.create_time)));\n          commit('setMessageTrashList', trash.map(_ => {\n            _.loading = false;\n            return _;\n          }).sort((a, b) => new Date(b.create_time) - new Date(a.create_time)));\n          resolve();\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n\n    // 根据当前点击的消息的id获取内容\n    getContentByMsgId({\n      state,\n      commit\n    }, {\n      msg_id\n    }) {\n      return new Promise((resolve, reject) => {\n        let contentItem = state.messageContentStore[msg_id];\n\n        if (contentItem) {\n          resolve(contentItem);\n        } else {\n          getContentByMsgId(msg_id).then(res => {\n            const content = res.data;\n            commit('updateMessageContentStore', {\n              msg_id,\n              content\n            });\n            resolve(content);\n          });\n        }\n      });\n    },\n\n    // 把一个未读消息标记为已读\n    hasRead({\n      state,\n      commit\n    }, {\n      msg_id\n    }) {\n      return new Promise((resolve, reject) => {\n        hasRead(msg_id).then(() => {\n          commit('moveMsg', {\n            from: 'messageUnreadList',\n            to: 'messageReadedList',\n            msg_id\n          });\n          commit('setMessageCount', state.unreadCount - 1);\n          resolve();\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n\n    // 删除一个已读消息到回收站\n    removeReaded({\n      commit\n    }, {\n      msg_id\n    }) {\n      return new Promise((resolve, reject) => {\n        removeReaded(msg_id).then(() => {\n          commit('moveMsg', {\n            from: 'messageReadedList',\n            to: 'messageTrashList',\n            msg_id\n          });\n          resolve();\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n\n    // 还原一个已删除消息到已读消息\n    restoreTrash({\n      commit\n    }, {\n      msg_id\n    }) {\n      return new Promise((resolve, reject) => {\n        restoreTrash(msg_id).then(() => {\n          commit('moveMsg', {\n            from: 'messageTrashList',\n            to: 'messageReadedList',\n            msg_id\n          });\n          resolve();\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n\n  }\n};",{"version":3,"sources":["/Users/lifangdi/workspace/health-admin/src/store/module/user.js"],"names":["login","logout","getUserInfo","getMessage","getContentByMsgId","hasRead","removeReaded","restoreTrash","getUnreadCount","setToken","getToken","state","userName","userId","avatorImgPath","token","access","hasGetInfo","unreadCount","messageUnreadList","messageReadedList","messageTrashList","messageContentStore","mutations","setAvator","avatorPath","setUserId","id","setUserName","name","setAccess","setHasGetInfo","status","setMessageCount","count","setMessageUnreadList","list","setMessageReadedList","setMessageTrashList","updateMessageContentStore","msg_id","content","moveMsg","from","to","index","findIndex","_","msgItem","splice","loading","unshift","getters","messageUnreadCount","length","messageReadedCount","messageTrashCount","actions","handleLogin","commit","password","trim","Promise","resolve","reject","then","res","data","catch","err","handleLogOut","avator","user_id","error","getUnreadMessageCount","getMessageList","unread","readed","trash","sort","a","b","Date","create_time","map","contentItem"],"mappings":"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","sourcesContent":["import {\n  login,\n  logout,\n  getUserInfo,\n  getMessage,\n  getContentByMsgId,\n  hasRead,\n  removeReaded,\n  restoreTrash,\n  getUnreadCount\n} from '@/api/user'\nimport { setToken, getToken } from '@/libs/util'\n\nexport default {\n  state: {\n    userName: '',\n    userId: '',\n    avatorImgPath: '',\n    token: getToken(),\n    access: '',\n    hasGetInfo: false,\n    unreadCount: 0,\n    messageUnreadList: [],\n    messageReadedList: [],\n    messageTrashList: [],\n    messageContentStore: {}\n  },\n  mutations: {\n    setAvator (state, avatorPath) {\n      state.avatorImgPath = avatorPath\n    },\n    setUserId (state, id) {\n      state.userId = id\n    },\n    setUserName (state, name) {\n      state.userName = name\n    },\n    setAccess (state, access) {\n      state.access = access\n    },\n    setToken (state, token) {\n      state.token = token\n      setToken(token)\n    },\n    setHasGetInfo (state, status) {\n      state.hasGetInfo = status\n    },\n    setMessageCount (state, count) {\n      state.unreadCount = count\n    },\n    setMessageUnreadList (state, list) {\n      state.messageUnreadList = list\n    },\n    setMessageReadedList (state, list) {\n      state.messageReadedList = list\n    },\n    setMessageTrashList (state, list) {\n      state.messageTrashList = list\n    },\n    updateMessageContentStore (state, { msg_id, content }) {\n      state.messageContentStore[msg_id] = content\n    },\n    moveMsg (state, { from, to, msg_id }) {\n      const index = state[from].findIndex(_ => _.msg_id === msg_id)\n      const msgItem = state[from].splice(index, 1)[0]\n      msgItem.loading = false\n      state[to].unshift(msgItem)\n    }\n  },\n  getters: {\n    messageUnreadCount: state => state.messageUnreadList.length,\n    messageReadedCount: state => state.messageReadedList.length,\n    messageTrashCount: state => state.messageTrashList.length\n  },\n  actions: {\n    // 登录\n    handleLogin ({ commit }, {userName, password}) {\n      userName = userName.trim()\n      return new Promise((resolve, reject) => {\n        login({\n          userName,\n          password\n        }).then(res => {\n          const data = res.data\n          commit('setToken', data.token)\n          resolve()\n        }).catch(err => {\n          reject(err)\n        })\n      })\n    },\n    // 退出登录\n    handleLogOut ({ state, commit }) {\n      return new Promise((resolve, reject) => {\n        logout(state.token).then(() => {\n          commit('setToken', '')\n          commit('setAccess', [])\n          resolve()\n        }).catch(err => {\n          reject(err)\n        })\n        // 如果你的退出登录无需请求接口，则可以直接使用下面三行代码而无需使用logout调用接口\n        // commit('setToken', '')\n        // commit('setAccess', [])\n        // resolve()\n      })\n    },\n    // 获取用户相关信息\n    getUserInfo ({ state, commit }) {\n      return new Promise((resolve, reject) => {\n        try {\n          getUserInfo(state.token).then(res => {\n            const data = res.data\n            commit('setAvator', data.avator)\n            commit('setUserName', data.name)\n            commit('setUserId', data.user_id)\n            commit('setAccess', data.access)\n            commit('setHasGetInfo', true)\n            resolve(data)\n          }).catch(err => {\n            reject(err)\n          })\n        } catch (error) {\n          reject(error)\n        }\n      })\n    },\n    // 此方法用来获取未读消息条数，接口只返回数值，不返回消息列表\n    getUnreadMessageCount ({ state, commit }) {\n      getUnreadCount().then(res => {\n        const { data } = res\n        commit('setMessageCount', data)\n      })\n    },\n    // 获取消息列表，其中包含未读、已读、回收站三个列表\n    getMessageList ({ state, commit }) {\n      return new Promise((resolve, reject) => {\n        getMessage().then(res => {\n          const { unread, readed, trash } = res.data\n          commit('setMessageUnreadList', unread.sort((a, b) => new Date(b.create_time) - new Date(a.create_time)))\n          commit('setMessageReadedList', readed.map(_ => {\n            _.loading = false\n            return _\n          }).sort((a, b) => new Date(b.create_time) - new Date(a.create_time)))\n          commit('setMessageTrashList', trash.map(_ => {\n            _.loading = false\n            return _\n          }).sort((a, b) => new Date(b.create_time) - new Date(a.create_time)))\n          resolve()\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n    // 根据当前点击的消息的id获取内容\n    getContentByMsgId ({ state, commit }, { msg_id }) {\n      return new Promise((resolve, reject) => {\n        let contentItem = state.messageContentStore[msg_id]\n        if (contentItem) {\n          resolve(contentItem)\n        } else {\n          getContentByMsgId(msg_id).then(res => {\n            const content = res.data\n            commit('updateMessageContentStore', { msg_id, content })\n            resolve(content)\n          })\n        }\n      })\n    },\n    // 把一个未读消息标记为已读\n    hasRead ({ state, commit }, { msg_id }) {\n      return new Promise((resolve, reject) => {\n        hasRead(msg_id).then(() => {\n          commit('moveMsg', {\n            from: 'messageUnreadList',\n            to: 'messageReadedList',\n            msg_id\n          })\n          commit('setMessageCount', state.unreadCount - 1)\n          resolve()\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n    // 删除一个已读消息到回收站\n    removeReaded ({ commit }, { msg_id }) {\n      return new Promise((resolve, reject) => {\n        removeReaded(msg_id).then(() => {\n          commit('moveMsg', {\n            from: 'messageReadedList',\n            to: 'messageTrashList',\n            msg_id\n          })\n          resolve()\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n    // 还原一个已删除消息到已读消息\n    restoreTrash ({ commit }, { msg_id }) {\n      return new Promise((resolve, reject) => {\n        restoreTrash(msg_id).then(() => {\n          commit('moveMsg', {\n            from: 'messageTrashList',\n            to: 'messageReadedList',\n            msg_id\n          })\n          resolve()\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    }\n  }\n}\n"]}]}