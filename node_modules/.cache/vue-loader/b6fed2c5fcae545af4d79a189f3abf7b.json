{"remainingRequest":"/Users/lifangdi/workspace/iview-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lifangdi/workspace/iview-admin/src/components/drag-drawer/drag-drawer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lifangdi/workspace/iview-admin/src/components/drag-drawer/drag-drawer.vue","mtime":1548038358000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport RenderDom from '@/libs/render-dom'\nimport DragDrawerTrigger from './drag-drawer-trigger.vue'\nimport Mixin from './mixin'\nimport { on, off } from '@/libs/tools'\nimport './index.less'\nexport default {\n  name: 'BDrawer',\n  components: {\n    RenderDom,\n    DragDrawerTrigger\n  },\n  mixins: [Mixin],\n  props: {\n    value: {\n      type: Boolean,\n      default: false\n    },\n    width: {\n      type: [String, Number],\n      default: 256\n    },\n    // 是否可拖动修改宽度\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    // 最小拖动宽度\n    minWidth: {\n      type: [String, Number],\n      default: 256\n    }\n  },\n  data () {\n    return {\n      canMove: false,\n      wrapperWidth: 0,\n      wrapperLeft: 0\n    }\n  },\n  computed: {\n    outerClasses () {\n      const classesArray = [\n        `${this.prefix}-wrapper`,\n        this.canMove ? 'no-select pointer-events-none' : ''\n      ]\n      return classesArray.join(' ')\n    },\n    placement () {\n      return this.$attrs.placement\n    },\n    innerWidth () {\n      const width = this.width\n      return width <= 100 ? (this.wrapperWidth * width) / 100 : width\n    },\n    triggerStyle () {\n      return {\n        [this.placement]: `${this.innerWidth}px`,\n        position: this.$attrs.inner ? 'absolute' : 'fixed'\n      }\n    }\n  },\n  methods: {\n    handleInput (status) {\n      this.$emit('input', status)\n    },\n    handleTriggerMousedown (event) {\n      this.canMove = true\n      this.$emit('on-resize-start')\n      // 防止鼠标选中抽屉中文字，造成拖动trigger触发浏览器原生拖动行为\n      window.getSelection().removeAllRanges()\n    },\n    handleMousemove (event) {\n      if (!this.canMove) return\n      // 更新容器宽度和距离左侧页面距离，如果是window则距左侧距离为0\n      this.setWrapperWidth()\n      const left = event.pageX - this.wrapperLeft\n      // 如果抽屉方向为右边，宽度计算需用容器宽度减去left\n      let width = this.placement === 'right' ? this.wrapperWidth - left : left\n      // 限定做小宽度\n      width = Math.max(width, parseFloat(this.minWidth))\n      event.atMin = width === parseFloat(this.minWidth)\n      // 如果当前width不大于100，视为百分比\n      if (width <= 100) width = (width / this.wrapperWidth) * 100\n      this.$emit('update:width', parseInt(width))\n      this.$emit('on-resize', event)\n    },\n    handleMouseup (event) {\n      this.canMove = false\n      this.$emit('on-resize-end')\n    },\n    setWrapperWidth () {\n      const {\n        width,\n        left\n      } = this.$refs.drawerWrapper.$el.getBoundingClientRect()\n      this.wrapperWidth = width\n      this.wrapperLeft = left\n    }\n  },\n  mounted () {\n    on(document, 'mousemove', this.handleMousemove)\n    on(document, 'mouseup', this.handleMouseup)\n    this.setWrapperWidth()\n  },\n  beforeDestroy () {\n    off(document, 'mousemove', this.handleMousemove)\n    off(document, 'mouseup', this.handleMouseup)\n  }\n}\n",{"version":3,"sources":["drag-drawer.vue"],"names":[],"mappingsfile":"drag-drawer.vue","sourceRoot":"src/components/drag-drawer","sourcesContent":["<template>\n  <Drawer ref=\"drawerWrapper\"\n          :value=\"value\"\n          @input=\"handleInput\"\n          :width=\"width\"\n          :class-name=\"outerClasses\"\n          v-bind=\"$attrs\"\n          v-on=\"$listeners\">\n    <!-- 所有插槽内容显示在这里 ↓ -->\n\n    <template v-for=\"(slots, slotsName) in $slots\">\n      <template v-if=\"slotsName !== 'default'\">\n        <render-dom v-for=\"(render, index) in slots\"\n                    :key=\"`b_drawer_${slotsName}_${index}`\"\n                    :render=\"() => render\"\n                    :slot=\"slotsName\">\n        </render-dom>\n      </template>\n      <template v-else>\n        <div :class=\"`${prefix}-body-wrapper`\"\n             :key=\"`b_drawer_${slotsName}`\">\n          <render-dom v-for=\"(render, index) in slots\"\n                      :key=\"`b_drawer_${slotsName}_${index}`\"\n                      :render=\"() => render\"\n                      :slot=\"slotsName\">\n          </render-dom>\n        </div>\n      </template>\n    </template>\n    <!-- 所有插槽内容显示在这里 ↑ -->\n    <div v-if=\"draggable\"\n         :style=\"triggerStyle\"\n         :class=\"`${prefix}-trigger-wrapper`\"\n         @mousedown=\"handleTriggerMousedown\">\n      <slot name=\"trigger\">\n        <drag-drawer-trigger></drag-drawer-trigger>\n      </slot>\n    </div>\n    <div v-if=\"$slots.footer\"\n         :class=\"`${prefix}-footer`\">\n      <slot name=\"footer\"></slot>\n    </div>\n  </Drawer>\n</template>\n\n<script>\nimport RenderDom from '@/libs/render-dom'\nimport DragDrawerTrigger from './drag-drawer-trigger.vue'\nimport Mixin from './mixin'\nimport { on, off } from '@/libs/tools'\nimport './index.less'\nexport default {\n  name: 'BDrawer',\n  components: {\n    RenderDom,\n    DragDrawerTrigger\n  },\n  mixins: [Mixin],\n  props: {\n    value: {\n      type: Boolean,\n      default: false\n    },\n    width: {\n      type: [String, Number],\n      default: 256\n    },\n    // 是否可拖动修改宽度\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    // 最小拖动宽度\n    minWidth: {\n      type: [String, Number],\n      default: 256\n    }\n  },\n  data () {\n    return {\n      canMove: false,\n      wrapperWidth: 0,\n      wrapperLeft: 0\n    }\n  },\n  computed: {\n    outerClasses () {\n      const classesArray = [\n        `${this.prefix}-wrapper`,\n        this.canMove ? 'no-select pointer-events-none' : ''\n      ]\n      return classesArray.join(' ')\n    },\n    placement () {\n      return this.$attrs.placement\n    },\n    innerWidth () {\n      const width = this.width\n      return width <= 100 ? (this.wrapperWidth * width) / 100 : width\n    },\n    triggerStyle () {\n      return {\n        [this.placement]: `${this.innerWidth}px`,\n        position: this.$attrs.inner ? 'absolute' : 'fixed'\n      }\n    }\n  },\n  methods: {\n    handleInput (status) {\n      this.$emit('input', status)\n    },\n    handleTriggerMousedown (event) {\n      this.canMove = true\n      this.$emit('on-resize-start')\n      // 防止鼠标选中抽屉中文字，造成拖动trigger触发浏览器原生拖动行为\n      window.getSelection().removeAllRanges()\n    },\n    handleMousemove (event) {\n      if (!this.canMove) return\n      // 更新容器宽度和距离左侧页面距离，如果是window则距左侧距离为0\n      this.setWrapperWidth()\n      const left = event.pageX - this.wrapperLeft\n      // 如果抽屉方向为右边，宽度计算需用容器宽度减去left\n      let width = this.placement === 'right' ? this.wrapperWidth - left : left\n      // 限定做小宽度\n      width = Math.max(width, parseFloat(this.minWidth))\n      event.atMin = width === parseFloat(this.minWidth)\n      // 如果当前width不大于100，视为百分比\n      if (width <= 100) width = (width / this.wrapperWidth) * 100\n      this.$emit('update:width', parseInt(width))\n      this.$emit('on-resize', event)\n    },\n    handleMouseup (event) {\n      this.canMove = false\n      this.$emit('on-resize-end')\n    },\n    setWrapperWidth () {\n      const {\n        width,\n        left\n      } = this.$refs.drawerWrapper.$el.getBoundingClientRect()\n      this.wrapperWidth = width\n      this.wrapperLeft = left\n    }\n  },\n  mounted () {\n    on(document, 'mousemove', this.handleMousemove)\n    on(document, 'mouseup', this.handleMouseup)\n    this.setWrapperWidth()\n  },\n  beforeDestroy () {\n    off(document, 'mousemove', this.handleMousemove)\n    off(document, 'mouseup', this.handleMouseup)\n  }\n}\n</script>\n"]}]}