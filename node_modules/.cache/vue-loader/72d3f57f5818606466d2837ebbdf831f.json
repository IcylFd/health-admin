{"remainingRequest":"/Users/lifangdi/workspace/iview-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lifangdi/workspace/iview-admin/src/components/cropper/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lifangdi/workspace/iview-admin/src/components/cropper/index.vue","mtime":1548038358000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Cropper from 'cropperjs'\nimport './index.less'\nimport 'cropperjs/dist/cropper.min.css'\nexport default {\n  name: 'Cropper',\n  props: {\n    src: {\n      type: String,\n      default: ''\n    },\n    preview: {\n      type: Boolean,\n      default: true\n    },\n    moveStep: {\n      type: Number,\n      default: 4\n    },\n    cropButtonText: {\n      type: String,\n      default: '裁剪'\n    }\n  },\n  data () {\n    return {\n      cropper: null,\n      insideSrc: ''\n    }\n  },\n  computed: {\n    imgId () {\n      return `cropper${this._uid}`\n    },\n    previewId () {\n      return `cropper_preview${this._uid}`\n    }\n  },\n  watch: {\n    src (src) {\n      this.replace(src)\n    },\n    insideSrc (src) {\n      this.replace(src)\n    }\n  },\n  methods: {\n    beforeUpload (file) {\n      const reader = new FileReader()\n      reader.readAsDataURL(file)\n      reader.onload = (event) => {\n        this.insideSrc = event.srcElement.result\n      }\n      return false\n    },\n    replace (src) {\n      this.cropper.replace(src)\n      this.insideSrc = src\n    },\n    rotate () {\n      this.cropper.rotate(90)\n    },\n    shrink () {\n      this.cropper.zoom(-0.1)\n    },\n    magnify () {\n      this.cropper.zoom(0.1)\n    },\n    scale (d) {\n      this.cropper[`scale${d}`](-this.cropper.getData()[`scale${d}`])\n    },\n    move (...argu) {\n      this.cropper.move(...argu)\n    },\n    crop () {\n      this.cropper.getCroppedCanvas().toBlob(blob => {\n        this.$emit('on-crop', blob)\n      })\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      let dom = document.getElementById(this.imgId)\n      this.cropper = new Cropper(dom, {\n        preview: `#${this.previewId}`,\n        checkCrossOrigin: true\n      })\n    })\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/cropper","sourcesContent":["<template>\n  <div class=\"cropper-wrapper\">\n    <div class=\"img-box\">\n      <img class=\"cropper-image\" :id=\"imgId\" alt=\"\">\n    </div>\n    <div class=\"right-con\">\n      <div v-if=\"preview\" class=\"preview-box\" :id=\"previewId\"></div>\n      <div class=\"button-box\">\n        <slot>\n          <Upload action=\"image/upload\" :before-upload=\"beforeUpload\">\n            <Button style=\"width: 150px;\" type=\"primary\">上传图片</Button>\n          </Upload>\n        </slot>\n        <div v-show=\"insideSrc\">\n          <Button type=\"primary\" @click=\"rotate\">\n            <Icon type=\"md-refresh\" :size=\"18\"/>\n          </Button>\n          <Button type=\"primary\" @click=\"shrink\">\n            <Icon type=\"md-remove\" :size=\"18\"/>\n          </Button>\n          <Button type=\"primary\" @click=\"magnify\">\n            <Icon type=\"md-add\" :size=\"18\"/>\n          </Button>\n          <Button type=\"primary\" @click=\"scale('X')\">\n            <Icon custom=\"iconfont icon-shuipingfanzhuan\" :size=\"18\"/>\n          </Button>\n          <Button type=\"primary\" @click=\"scale('Y')\">\n            <Icon custom=\"iconfont icon-chuizhifanzhuan\" :size=\"18\"/>\n          </Button>\n          <Button type=\"primary\" @click=\"move(0, -moveStep)\">\n            <Icon type=\"md-arrow-round-up\" :size=\"18\"/>\n          </Button>\n          <Button type=\"primary\" @click=\"move(-moveStep, 0)\">\n            <Icon type=\"md-arrow-round-back\" :size=\"18\"/>\n          </Button>\n          <Button type=\"primary\" @click=\"move(0, moveStep)\">\n            <Icon type=\"md-arrow-round-down\" :size=\"18\"/>\n          </Button>\n          <Button type=\"primary\" @click=\"move(moveStep, 0)\">\n            <Icon type=\"md-arrow-round-forward\" :size=\"18\"/>\n          </Button>\n          <Button style=\"width: 150px;margin-top: 10px;\" type=\"primary\" @click=\"crop\">{{ cropButtonText }}</Button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Cropper from 'cropperjs'\nimport './index.less'\nimport 'cropperjs/dist/cropper.min.css'\nexport default {\n  name: 'Cropper',\n  props: {\n    src: {\n      type: String,\n      default: ''\n    },\n    preview: {\n      type: Boolean,\n      default: true\n    },\n    moveStep: {\n      type: Number,\n      default: 4\n    },\n    cropButtonText: {\n      type: String,\n      default: '裁剪'\n    }\n  },\n  data () {\n    return {\n      cropper: null,\n      insideSrc: ''\n    }\n  },\n  computed: {\n    imgId () {\n      return `cropper${this._uid}`\n    },\n    previewId () {\n      return `cropper_preview${this._uid}`\n    }\n  },\n  watch: {\n    src (src) {\n      this.replace(src)\n    },\n    insideSrc (src) {\n      this.replace(src)\n    }\n  },\n  methods: {\n    beforeUpload (file) {\n      const reader = new FileReader()\n      reader.readAsDataURL(file)\n      reader.onload = (event) => {\n        this.insideSrc = event.srcElement.result\n      }\n      return false\n    },\n    replace (src) {\n      this.cropper.replace(src)\n      this.insideSrc = src\n    },\n    rotate () {\n      this.cropper.rotate(90)\n    },\n    shrink () {\n      this.cropper.zoom(-0.1)\n    },\n    magnify () {\n      this.cropper.zoom(0.1)\n    },\n    scale (d) {\n      this.cropper[`scale${d}`](-this.cropper.getData()[`scale${d}`])\n    },\n    move (...argu) {\n      this.cropper.move(...argu)\n    },\n    crop () {\n      this.cropper.getCroppedCanvas().toBlob(blob => {\n        this.$emit('on-crop', blob)\n      })\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      let dom = document.getElementById(this.imgId)\n      this.cropper = new Cropper(dom, {\n        preview: `#${this.previewId}`,\n        checkCrossOrigin: true\n      })\n    })\n  }\n}\n</script>\n"]}]}