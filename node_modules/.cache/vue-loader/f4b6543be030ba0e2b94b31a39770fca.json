{"remainingRequest":"/Users/lifangdi/workspace/iview-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lifangdi/workspace/iview-admin/src/components/tables/tables.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lifangdi/workspace/iview-admin/src/components/tables/tables.vue","mtime":1551926733000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TablesEdit from './edit.vue'\nimport handleBtns from './handle-btns'\nimport './index.less'\nexport default {\n  name: 'Tables',\n  props: {\n    value: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    columns: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    size: String,\n    width: {\n      type: [Number, String]\n    },\n    height: {\n      type: [Number, String]\n    },\n    stripe: {\n      type: Boolean,\n      default: false\n    },\n    border: {\n      type: Boolean,\n      default: false\n    },\n    showHeader: {\n      type: Boolean,\n      default: true\n    },\n    highlightRow: {\n      type: Boolean,\n      default: false\n    },\n    rowClassName: {\n      type: Function,\n      default () {\n        return ''\n      }\n    },\n    context: {\n      type: Object\n    },\n    noDataText: {\n      type: String\n    },\n    noFilteredDataText: {\n      type: String\n    },\n    disabledHover: {\n      type: Boolean\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 全局设置是否可编辑\n     */\n    editable: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 是否可搜索\n     */\n    searchable: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 搜索控件所在位置，'top' / 'bottom'\n     */\n    searchPlace: {\n      type: String,\n      default: 'top'\n    }\n  },\n  /**\n   * Events\n   * @on-start-edit 返回值 {Object} ：同iview中render函数中的params对象 { row, index, column }\n   * @on-cancel-edit 返回值 {Object} 同上\n   * @on-save-edit 返回值 {Object} ：除上面三个参数外，还有一个value: 修改后的数据\n   */\n  data () {\n    return {\n      insideColumns: [],\n      insideTableData: [],\n      edittingCellId: '',\n      edittingText: '',\n      searchValue: '',\n      searchKey: ''\n    }\n  },\n  methods: {\n    suportEdit (item, index) {\n      item.render = (h, params) => {\n        return h(TablesEdit, {\n          props: {\n            params: params,\n            value: this.insideTableData[params.index][params.column.key],\n            edittingCellId: this.edittingCellId,\n            editable: this.editable\n          },\n          on: {\n            'input': val => {\n              this.edittingText = val\n            },\n            'on-start-edit': (params) => {\n              this.edittingCellId = `editting-${params.index}-${params.column.key}`\n              this.$emit('on-start-edit', params)\n            },\n            'on-cancel-edit': (params) => {\n              this.edittingCellId = ''\n              this.$emit('on-cancel-edit', params)\n            },\n            'on-save-edit': (params) => {\n              this.value[params.row.initRowIndex][params.column.key] = this.edittingText\n              this.$emit('input', this.value)\n              this.$emit('on-save-edit', Object.assign(params, {value: this.edittingText}))\n              this.edittingCellId = ''\n            }\n          }\n        })\n      }\n      return item\n    },\n    surportHandle (item) {\n      let options = item.options || []\n      let insideBtns = []\n      options.forEach(item => {\n        if (handleBtns[item]) insideBtns.push(handleBtns[item])\n      })\n      let btns = item.button ? [].concat(insideBtns, item.button) : insideBtns\n      item.render = (h, params) => {\n        params.tableData = this.value\n        return h('div', btns.map(item => item(h, params, this)))\n      }\n      return item\n    },\n    handleColumns (columns) {\n      this.insideColumns = columns.map((item, index) => {\n        let res = item\n        if (res.editable) res = this.suportEdit(res, index)\n        if (res.key === 'handle') res = this.surportHandle(res)\n        return res\n      })\n    },\n    setDefaultSearchKey () {\n      this.searchKey = this.columns[0].key !== 'handle' ? this.columns[0].key : (this.columns.length > 1 ? this.columns[1].key : '')\n    },\n    handleClear (e) {\n      if (e.target.value === '') this.insideTableData = this.value\n    },\n    handleSearch () {\n      this.insideTableData = this.value.filter(item => item[this.searchKey].indexOf(this.searchValue) > -1)\n    },\n    handleTableData () {\n      this.insideTableData = this.value.map((item, index) => {\n        let res = item\n        res.initRowIndex = index\n        return res\n      })\n    },\n    exportCsv (params) {\n      this.$refs.tablesMain.exportCsv(params)\n    },\n    clearCurrentRow () {\n      this.$refs.talbesMain.clearCurrentRow()\n    },\n    onCurrentChange (currentRow, oldCurrentRow) {\n      this.$emit('on-current-change', currentRow, oldCurrentRow)\n    },\n    onSelect (selection, row) {\n      this.$emit('on-select', selection, row)\n    },\n    onSelectCancel (selection, row) {\n      this.$emit('on-select-cancel', selection, row)\n    },\n    onSelectAll (selection) {\n      this.$emit('on-select-all', selection)\n    },\n    onSelectionChange (selection) {\n      this.$emit('on-selection-change', selection)\n    },\n    onSortChange (column, key, order) {\n      this.$emit('on-sort-change', column, key, order)\n    },\n    onFilterChange (row) {\n      this.$emit('on-filter-change', row)\n    },\n    onRowClick (row, index) {\n      this.$emit('on-row-click', row, index)\n    },\n    onRowDblclick (row, index) {\n      this.$emit('on-row-dblclick', row, index)\n    },\n    onExpand (row, status) {\n      this.$emit('on-expand', row, status)\n    }\n  },\n  watch: {\n    columns (columns) {\n      this.handleColumns(columns)\n      this.setDefaultSearchKey()\n    },\n    value (val) {\n      this.handleTableData()\n      if (this.searchable) this.handleSearch()\n    }\n  },\n  mounted () {\n    this.handleColumns(this.columns)\n    this.setDefaultSearchKey()\n    this.handleTableData()\n  }\n}\n",{"version":3,"sources":["tables.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"tables.vue","sourceRoot":"src/components/tables","sourcesContent":["<template>\n  <div>\n    <div v-if=\"searchable && searchPlace === 'top'\" class=\"search-con search-con-top\">\n      <Select v-model=\"searchKey\" class=\"search-col\">\n        <Option v-for=\"item in columns\" v-if=\"item.key !== 'handle'\" :value=\"item.key\" :key=\"`search-col-${item.key}`\">{{ item.title }}</Option>\n      </Select>\n      <Input @on-change=\"handleClear\" clearable placeholder=\"输入关键字搜索\" class=\"search-input\" v-model=\"searchValue\"/>\n      <Button @click=\"handleSearch\" class=\"search-btn\" type=\"primary\"><Icon type=\"search\"/>搜索</Button>\n    </div>\n    <Table\n      ref=\"tablesMain\"\n      :data=\"insideTableData\"\n      :columns=\"insideColumns\"\n      :stripe=\"stripe\"\n      :border=\"border\"\n      :show-header=\"showHeader\"\n      :width=\"width\"\n      :height=\"height\"\n      :loading=\"loading\"\n      :disabled-hover=\"disabledHover\"\n      :highlight-row=\"highlightRow\"\n      :row-class-name=\"rowClassName\"\n      :size=\"size\"\n      :no-data-text=\"noDataText\"\n      :no-filtered-data-text=\"noFilteredDataText\"\n      @on-current-change=\"onCurrentChange\"\n      @on-select=\"onSelect\"\n      @on-select-cancel=\"onSelectCancel\"\n      @on-select-all=\"onSelectAll\"\n      @on-selection-change=\"onSelectionChange\"\n      @on-sort-change=\"onSortChange\"\n      @on-filter-change=\"onFilterChange\"\n      @on-row-click=\"onRowClick\"\n      @on-row-dblclick=\"onRowDblclick\"\n      @on-expand=\"onExpand\"\n    >\n      <slot name=\"header\" slot=\"header\"></slot>\n      <slot name=\"footer\" slot=\"footer\"></slot>\n      <slot name=\"loading\" slot=\"loading\"></slot>\n    </Table>\n    <div v-if=\"searchable && searchPlace === 'bottom'\" class=\"search-con search-con-top\">\n      <Select v-model=\"searchKey\" class=\"search-col\">\n        <Option v-for=\"item in columns\" v-if=\"item.key !== 'handle'\" :value=\"item.key\" :key=\"`search-col-${item.key}`\">{{ item.title }}</Option>\n      </Select>\n      <Input placeholder=\"输入关键字搜索\" class=\"search-input\" v-model=\"searchValue\"/>\n      <Button class=\"search-btn\" type=\"primary\"><Icon type=\"search\"/>搜索</Button>\n    </div>\n    <a id=\"hrefToExportTable\" style=\"display: none;width: 0px;height: 0px;\"></a>\n  </div>\n</template>\n\n<script>\nimport TablesEdit from './edit.vue'\nimport handleBtns from './handle-btns'\nimport './index.less'\nexport default {\n  name: 'Tables',\n  props: {\n    value: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    columns: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    size: String,\n    width: {\n      type: [Number, String]\n    },\n    height: {\n      type: [Number, String]\n    },\n    stripe: {\n      type: Boolean,\n      default: false\n    },\n    border: {\n      type: Boolean,\n      default: false\n    },\n    showHeader: {\n      type: Boolean,\n      default: true\n    },\n    highlightRow: {\n      type: Boolean,\n      default: false\n    },\n    rowClassName: {\n      type: Function,\n      default () {\n        return ''\n      }\n    },\n    context: {\n      type: Object\n    },\n    noDataText: {\n      type: String\n    },\n    noFilteredDataText: {\n      type: String\n    },\n    disabledHover: {\n      type: Boolean\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 全局设置是否可编辑\n     */\n    editable: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 是否可搜索\n     */\n    searchable: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 搜索控件所在位置，'top' / 'bottom'\n     */\n    searchPlace: {\n      type: String,\n      default: 'top'\n    }\n  },\n  /**\n   * Events\n   * @on-start-edit 返回值 {Object} ：同iview中render函数中的params对象 { row, index, column }\n   * @on-cancel-edit 返回值 {Object} 同上\n   * @on-save-edit 返回值 {Object} ：除上面三个参数外，还有一个value: 修改后的数据\n   */\n  data () {\n    return {\n      insideColumns: [],\n      insideTableData: [],\n      edittingCellId: '',\n      edittingText: '',\n      searchValue: '',\n      searchKey: ''\n    }\n  },\n  methods: {\n    suportEdit (item, index) {\n      item.render = (h, params) => {\n        return h(TablesEdit, {\n          props: {\n            params: params,\n            value: this.insideTableData[params.index][params.column.key],\n            edittingCellId: this.edittingCellId,\n            editable: this.editable\n          },\n          on: {\n            'input': val => {\n              this.edittingText = val\n            },\n            'on-start-edit': (params) => {\n              this.edittingCellId = `editting-${params.index}-${params.column.key}`\n              this.$emit('on-start-edit', params)\n            },\n            'on-cancel-edit': (params) => {\n              this.edittingCellId = ''\n              this.$emit('on-cancel-edit', params)\n            },\n            'on-save-edit': (params) => {\n              this.value[params.row.initRowIndex][params.column.key] = this.edittingText\n              this.$emit('input', this.value)\n              this.$emit('on-save-edit', Object.assign(params, {value: this.edittingText}))\n              this.edittingCellId = ''\n            }\n          }\n        })\n      }\n      return item\n    },\n    surportHandle (item) {\n      let options = item.options || []\n      let insideBtns = []\n      options.forEach(item => {\n        if (handleBtns[item]) insideBtns.push(handleBtns[item])\n      })\n      let btns = item.button ? [].concat(insideBtns, item.button) : insideBtns\n      item.render = (h, params) => {\n        params.tableData = this.value\n        return h('div', btns.map(item => item(h, params, this)))\n      }\n      return item\n    },\n    handleColumns (columns) {\n      this.insideColumns = columns.map((item, index) => {\n        let res = item\n        if (res.editable) res = this.suportEdit(res, index)\n        if (res.key === 'handle') res = this.surportHandle(res)\n        return res\n      })\n    },\n    setDefaultSearchKey () {\n      this.searchKey = this.columns[0].key !== 'handle' ? this.columns[0].key : (this.columns.length > 1 ? this.columns[1].key : '')\n    },\n    handleClear (e) {\n      if (e.target.value === '') this.insideTableData = this.value\n    },\n    handleSearch () {\n      this.insideTableData = this.value.filter(item => item[this.searchKey].indexOf(this.searchValue) > -1)\n    },\n    handleTableData () {\n      this.insideTableData = this.value.map((item, index) => {\n        let res = item\n        res.initRowIndex = index\n        return res\n      })\n    },\n    exportCsv (params) {\n      this.$refs.tablesMain.exportCsv(params)\n    },\n    clearCurrentRow () {\n      this.$refs.talbesMain.clearCurrentRow()\n    },\n    onCurrentChange (currentRow, oldCurrentRow) {\n      this.$emit('on-current-change', currentRow, oldCurrentRow)\n    },\n    onSelect (selection, row) {\n      this.$emit('on-select', selection, row)\n    },\n    onSelectCancel (selection, row) {\n      this.$emit('on-select-cancel', selection, row)\n    },\n    onSelectAll (selection) {\n      this.$emit('on-select-all', selection)\n    },\n    onSelectionChange (selection) {\n      this.$emit('on-selection-change', selection)\n    },\n    onSortChange (column, key, order) {\n      this.$emit('on-sort-change', column, key, order)\n    },\n    onFilterChange (row) {\n      this.$emit('on-filter-change', row)\n    },\n    onRowClick (row, index) {\n      this.$emit('on-row-click', row, index)\n    },\n    onRowDblclick (row, index) {\n      this.$emit('on-row-dblclick', row, index)\n    },\n    onExpand (row, status) {\n      this.$emit('on-expand', row, status)\n    }\n  },\n  watch: {\n    columns (columns) {\n      this.handleColumns(columns)\n      this.setDefaultSearchKey()\n    },\n    value (val) {\n      this.handleTableData()\n      if (this.searchable) this.handleSearch()\n    }\n  },\n  mounted () {\n    this.handleColumns(this.columns)\n    this.setDefaultSearchKey()\n    this.handleTableData()\n  }\n}\n</script>\n"]}]}