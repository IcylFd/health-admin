{"remainingRequest":"/Users/lifangdi/workspace/iview-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lifangdi/workspace/iview-admin/src/view/components/org-tree/components/org-view.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lifangdi/workspace/iview-admin/src/view/components/org-tree/components/org-view.vue","mtime":1548038358000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { on, off } from '@/libs/tools'\nconst menuList = [\n  {\n    key: 'edit',\n    label: '编辑部门'\n  },\n  {\n    key: 'detail',\n    label: '查看部门'\n  },\n  {\n    key: 'new',\n    label: '新增子部门'\n  },\n  {\n    key: 'delete',\n    label: '删除部门'\n  }\n]\nexport default {\n  name: 'OrgView',\n  props: {\n    zoomHandled: {\n      type: Number,\n      default: 1\n    },\n    data: Object\n  },\n  data () {\n    return {\n      currentContextMenuId: '',\n      orgTreeOffsetLeft: 0,\n      orgTreeOffsetTop: 0,\n      initPageX: 0,\n      initPageY: 0,\n      oldMarginLeft: 0,\n      oldMarginTop: 0,\n      canMove: false\n    }\n  },\n  computed: {\n    orgTreeStyle () {\n      return {\n        transform: `translate(-50%, -50%) scale(${this.zoomHandled}, ${\n          this.zoomHandled\n        })`,\n        marginLeft: `${this.orgTreeOffsetLeft}px`,\n        marginTop: `${this.orgTreeOffsetTop}px`\n      }\n    }\n  },\n  methods: {\n    handleNodeClick (e, data, expand) {\n      expand()\n    },\n    closeMenu () {\n      this.currentContextMenuId = ''\n    },\n    getBgColor (data) {\n      return this.currentContextMenuId === data.id\n        ? data.isRoot\n          ? '#0d7fe8'\n          : '#5d6c7b'\n        : ''\n    },\n    nodeRender (h, data) {\n      return (\n        <div\n          class={[\n            'custom-org-node',\n            data.children && data.children.length ? 'has-children-label' : ''\n          ]}\n          on-mousedown={event => event.stopPropagation()}\n          on-contextmenu={this.contextmenu.bind(this, data)}\n        >\n          {data.label}\n          <dropdown\n            trigger=\"custom\"\n            class=\"context-menu\"\n            visible={this.currentContextMenuId === data.id}\n            nativeOn-click={this.handleDropdownClick}\n            on-on-click={this.handleContextMenuClick.bind(this, data)}\n            style={{\n              transform: `scale(${1 / this.zoomHandled}, ${1 /\n                this.zoomHandled})`\n            }}\n            v-click-outside={this.closeMenu}\n          >\n            <dropdown-menu slot=\"list\">\n              {menuList.map(item => {\n                return (\n                  <dropdown-item name={item.key}>{item.label}</dropdown-item>\n                )\n              })}\n            </dropdown-menu>\n          </dropdown>\n        </div>\n      )\n    },\n    contextmenu (data, $event) {\n      let event = $event || window.event\n      event.preventDefault\n        ? event.preventDefault()\n        : (event.returnValue = false)\n      this.currentContextMenuId = data.id\n    },\n    setDepartmentData (data) {\n      data.isRoot = true\n      this.departmentData = data\n    },\n    mousedownView (event) {\n      this.canMove = true\n      this.initPageX = event.pageX\n      this.initPageY = event.pageY\n      this.oldMarginLeft = this.orgTreeOffsetLeft\n      this.oldMarginTop = this.orgTreeOffsetTop\n      on(document, 'mousemove', this.mousemoveView)\n      on(document, 'mouseup', this.mouseupView)\n    },\n    mousemoveView (event) {\n      if (!this.canMove) return\n      const { pageX, pageY } = event\n      this.orgTreeOffsetLeft = this.oldMarginLeft + pageX - this.initPageX\n      this.orgTreeOffsetTop = this.oldMarginTop + pageY - this.initPageY\n    },\n    mouseupView () {\n      this.canMove = false\n      off(document, 'mousemove', this.mousemoveView)\n      off(document, 'mouseup', this.mouseupView)\n    },\n    handleDropdownClick (event) {\n      event.stopPropagation()\n    },\n    handleDocumentContextmenu () {\n      this.canMove = false\n    },\n    handleContextMenuClick (data, key) {\n      this.$emit('on-menu-click', { data, key })\n    }\n  },\n  mounted () {\n    on(document, 'contextmenu', this.handleDocumentContextmenu)\n  },\n  beforeDestroy () {\n    off(document, 'contextmenu', this.handleDocumentContextmenu)\n  }\n}\n",{"version":3,"sources":["org-view.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"org-view.vue","sourceRoot":"src/view/components/org-tree/components","sourcesContent":["<template>\n  <div\n    ref=\"dragWrapper\"\n    class=\"org-tree-drag-wrapper\"\n    @mousedown=\"mousedownView\"\n    @contextmenu=\"handleDocumentContextmenu\"\n  >\n    <div class=\"org-tree-wrapper\" :style=\"orgTreeStyle\">\n      <v-org-tree\n        v-if=\"data\"\n        :data=\"data\"\n        :node-render=\"nodeRender\"\n        :expand-all=\"true\"\n        @on-node-click=\"handleNodeClick\"\n        collapsable\n      ></v-org-tree>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { on, off } from '@/libs/tools'\nconst menuList = [\n  {\n    key: 'edit',\n    label: '编辑部门'\n  },\n  {\n    key: 'detail',\n    label: '查看部门'\n  },\n  {\n    key: 'new',\n    label: '新增子部门'\n  },\n  {\n    key: 'delete',\n    label: '删除部门'\n  }\n]\nexport default {\n  name: 'OrgView',\n  props: {\n    zoomHandled: {\n      type: Number,\n      default: 1\n    },\n    data: Object\n  },\n  data () {\n    return {\n      currentContextMenuId: '',\n      orgTreeOffsetLeft: 0,\n      orgTreeOffsetTop: 0,\n      initPageX: 0,\n      initPageY: 0,\n      oldMarginLeft: 0,\n      oldMarginTop: 0,\n      canMove: false\n    }\n  },\n  computed: {\n    orgTreeStyle () {\n      return {\n        transform: `translate(-50%, -50%) scale(${this.zoomHandled}, ${\n          this.zoomHandled\n        })`,\n        marginLeft: `${this.orgTreeOffsetLeft}px`,\n        marginTop: `${this.orgTreeOffsetTop}px`\n      }\n    }\n  },\n  methods: {\n    handleNodeClick (e, data, expand) {\n      expand()\n    },\n    closeMenu () {\n      this.currentContextMenuId = ''\n    },\n    getBgColor (data) {\n      return this.currentContextMenuId === data.id\n        ? data.isRoot\n          ? '#0d7fe8'\n          : '#5d6c7b'\n        : ''\n    },\n    nodeRender (h, data) {\n      return (\n        <div\n          class={[\n            'custom-org-node',\n            data.children && data.children.length ? 'has-children-label' : ''\n          ]}\n          on-mousedown={event => event.stopPropagation()}\n          on-contextmenu={this.contextmenu.bind(this, data)}\n        >\n          {data.label}\n          <dropdown\n            trigger=\"custom\"\n            class=\"context-menu\"\n            visible={this.currentContextMenuId === data.id}\n            nativeOn-click={this.handleDropdownClick}\n            on-on-click={this.handleContextMenuClick.bind(this, data)}\n            style={{\n              transform: `scale(${1 / this.zoomHandled}, ${1 /\n                this.zoomHandled})`\n            }}\n            v-click-outside={this.closeMenu}\n          >\n            <dropdown-menu slot=\"list\">\n              {menuList.map(item => {\n                return (\n                  <dropdown-item name={item.key}>{item.label}</dropdown-item>\n                )\n              })}\n            </dropdown-menu>\n          </dropdown>\n        </div>\n      )\n    },\n    contextmenu (data, $event) {\n      let event = $event || window.event\n      event.preventDefault\n        ? event.preventDefault()\n        : (event.returnValue = false)\n      this.currentContextMenuId = data.id\n    },\n    setDepartmentData (data) {\n      data.isRoot = true\n      this.departmentData = data\n    },\n    mousedownView (event) {\n      this.canMove = true\n      this.initPageX = event.pageX\n      this.initPageY = event.pageY\n      this.oldMarginLeft = this.orgTreeOffsetLeft\n      this.oldMarginTop = this.orgTreeOffsetTop\n      on(document, 'mousemove', this.mousemoveView)\n      on(document, 'mouseup', this.mouseupView)\n    },\n    mousemoveView (event) {\n      if (!this.canMove) return\n      const { pageX, pageY } = event\n      this.orgTreeOffsetLeft = this.oldMarginLeft + pageX - this.initPageX\n      this.orgTreeOffsetTop = this.oldMarginTop + pageY - this.initPageY\n    },\n    mouseupView () {\n      this.canMove = false\n      off(document, 'mousemove', this.mousemoveView)\n      off(document, 'mouseup', this.mouseupView)\n    },\n    handleDropdownClick (event) {\n      event.stopPropagation()\n    },\n    handleDocumentContextmenu () {\n      this.canMove = false\n    },\n    handleContextMenuClick (data, key) {\n      this.$emit('on-menu-click', { data, key })\n    }\n  },\n  mounted () {\n    on(document, 'contextmenu', this.handleDocumentContextmenu)\n  },\n  beforeDestroy () {\n    off(document, 'contextmenu', this.handleDocumentContextmenu)\n  }\n}\n</script>\n\n<style>\n</style>\n"]}]}