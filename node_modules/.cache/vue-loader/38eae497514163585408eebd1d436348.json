{"remainingRequest":"/Users/lifangdi/workspace/iview-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lifangdi/workspace/iview-admin/src/components/split-pane/split.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/lifangdi/workspace/iview-admin/src/components/split-pane/split.vue","mtime":1548038358000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/less-loader/dist/cjs.js","mtime":1548038398000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lifangdi/workspace/iview-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import './index.less';\n",{"version":3,"sources":["split.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4JA","file":"split.vue","sourceRoot":"src/components/split-pane","sourcesContent":["<template>\n  <div ref=\"outerWrapper\" :class=\"wrapperClasses\">\n    <div v-if=\"isHorizontal\" :class=\"`${prefix}-horizontal`\">\n      <div :style=\"{right: `${anotherOffset}%`}\" :class=\"[`${prefix}-pane`, 'left-pane']\"><slot name=\"left\"/></div>\n      <div :class=\"`${prefix}-trigger-con`\" :style=\"{left: `${offset}%`}\" @mousedown=\"handleMousedown\">\n        <slot name=\"trigger\">\n          <trigger mode=\"vertical\"/>\n        </slot>\n      </div>\n      <div :style=\"{left: `${offset}%`}\" :class=\"[`${prefix}-pane`, 'right-pane']\"><slot name=\"right\"/></div>\n    </div>\n    <div v-else :class=\"`${prefix}-vertical`\">\n      <div :style=\"{bottom: `${anotherOffset}%`}\" :class=\"[`${prefix}-pane`, 'top-pane']\"><slot name=\"top\"/></div>\n     <div :class=\"`${prefix}-trigger-con`\" :style=\"{top: `${offset}%`}\" @mousedown=\"handleMousedown\">\n        <slot name=\"trigger\">\n          <trigger mode=\"horizontal\"/>\n        </slot>\n      </div>\n      <div :style=\"{top: `${offset}%`}\" :class=\"[`${prefix}-pane`, 'bottom-pane']\"><slot name=\"bottom\"/></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { oneOf, on, off } from '@/libs/tools'\nimport Trigger from './trigger.vue'\nexport default {\n  name: 'SplitPane',\n  components: {\n    Trigger\n  },\n  props: {\n    value: {\n      type: [Number, String],\n      default: 0.5\n    },\n    mode: {\n      validator (value) {\n        return oneOf(value, ['horizontal', 'vertical'])\n      },\n      default: 'horizontal'\n    },\n    min: {\n      type: [Number, String],\n      default: '40px'\n    },\n    max: {\n      type: [Number, String],\n      default: '40px'\n    }\n  },\n  /**\n   * Events\n   * @on-move-start\n   * @on-moving 返回值：事件对象，但是在事件对象中加入了两个参数：atMin(当前是否在最小值处), atMax(当前是否在最大值处)\n   * @on-move-end\n   */\n  data () {\n    return {\n      prefix: 'ivu-split',\n      offset: 0,\n      oldOffset: 0,\n      isMoving: false\n    }\n  },\n  computed: {\n    wrapperClasses () {\n      return [\n        `${this.prefix}-wrapper`,\n        this.isMoving ? 'no-select' : ''\n      ]\n    },\n    isHorizontal () {\n      return this.mode === 'horizontal'\n    },\n    anotherOffset () {\n      return 100 - this.offset\n    },\n    valueIsPx () {\n      return typeof this.value === 'string'\n    },\n    offsetSize () {\n      return this.isHorizontal ? 'offsetWidth' : 'offsetHeight'\n    },\n    computedMin () {\n      return this.getComputedThresholdValue('min')\n    },\n    computedMax () {\n      return this.getComputedThresholdValue('max')\n    }\n  },\n  methods: {\n    px2percent (numerator, denominator) {\n      return parseFloat(numerator) / parseFloat(denominator)\n    },\n    getComputedThresholdValue (type) {\n      let size = this.$refs.outerWrapper[this.offsetSize]\n      if (this.valueIsPx) return typeof this[type] === 'string' ? this[type] : size * this[type]\n      else return typeof this[type] === 'string' ? this.px2percent(this[type], size) : this[type]\n    },\n    getMin (value1, value2) {\n      if (this.valueIsPx) return `${Math.min(parseFloat(value1), parseFloat(value2))}px`\n      else return Math.min(value1, value2)\n    },\n    getMax (value1, value2) {\n      if (this.valueIsPx) return `${Math.max(parseFloat(value1), parseFloat(value2))}px`\n      else return Math.max(value1, value2)\n    },\n    getAnotherOffset (value) {\n      let res = 0\n      if (this.valueIsPx) res = `${this.$refs.outerWrapper[this.offsetSize] - parseFloat(value)}px`\n      else res = 1 - value\n      return res\n    },\n    handleMove (e) {\n      let pageOffset = this.isHorizontal ? e.pageX : e.pageY\n      let offset = pageOffset - this.initOffset\n      let outerWidth = this.$refs.outerWrapper[this.offsetSize]\n      let value = this.valueIsPx ? `${parseFloat(this.oldOffset) + offset}px` : (this.px2percent(outerWidth * this.oldOffset + offset, outerWidth))\n      let anotherValue = this.getAnotherOffset(value)\n      if (parseFloat(value) <= parseFloat(this.computedMin)) value = this.getMax(value, this.computedMin)\n      if (parseFloat(anotherValue) <= parseFloat(this.computedMax)) value = this.getAnotherOffset(this.getMax(anotherValue, this.computedMax))\n      e.atMin = this.value === this.computedMin\n      e.atMax = this.valueIsPx ? this.getAnotherOffset(this.value) === this.computedMax : this.getAnotherOffset(this.value).toFixed(5) === this.computedMax.toFixed(5)\n      this.$emit('input', value)\n      this.$emit('on-moving', e)\n    },\n    handleUp () {\n      this.isMoving = false\n      off(document, 'mousemove', this.handleMove)\n      off(document, 'mouseup', this.handleUp)\n      this.$emit('on-move-end')\n    },\n    handleMousedown (e) {\n      this.initOffset = this.isHorizontal ? e.pageX : e.pageY\n      this.oldOffset = this.value\n      this.isMoving = true\n      on(document, 'mousemove', this.handleMove)\n      on(document, 'mouseup', this.handleUp)\n      this.$emit('on-move-start')\n    }\n  },\n  watch: {\n    value () {\n      this.offset = (this.valueIsPx ? this.px2percent(this.value, this.$refs.outerWrapper[this.offsetSize]) : this.value) * 10000 / 100\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      this.offset = (this.valueIsPx ? this.px2percent(this.value, this.$refs.outerWrapper[this.offsetSize]) : this.value) * 10000 / 100\n    })\n  }\n}\n</script>\n\n<style lang=\"less\">\n@import './index.less';\n</style>\n"]}]}